#!/bin/bash
set +e

if [[ $# -ne 2 || ( $1 != "mount" && $1 != "unmount" ) ]]; then
  echo "Usage:"
  echo "mounter mount   destination   # mount the remote destination"
  echo "mounter unmount destination   # unmount the remote destination"
  exit -1
fi

declare -A mountInfo

# Add mounts as needed
case $2 in
  "production")
    mountInfo=( [name]="the MetaCity production"
                          [ref]="production"
                          [mountDir]="/media/tmc"
                          [mountCommand]="sshfs -o allow_other doug@enc:/srv/http/tmc /media/tmc"
                          [unmountCommand]="sudo umount /media/tmc");;

  "assets")
    mountInfo=( [name]="the MetaCity assets"
                          [ref]="assets"
                          [mountDir]="/media/tmcassets"
                          [mountCommand]="sshfs -o allow_other doug@enc:/srv/http/tmcassets /media/tmcassets"
                          [unmountCommand]="sudo umount /media/tmcassets");;

  "media")
    mountInfo=( [name]="the MetaCity media"
                          [ref]="media"
                          [mountDir]="/media/tmcmedia"
                          [mountCommand]="sshfs -o allow_other doug@enc:/srv/http/tmcmedia /media/tmcmedia"
                          [unmountCommand]="sudo umount /media/tmcmedia");;
  *) 
    echo "Unknown mount. Please provide a known mount."
    echo "Known mounts are: 'production', 'assets', 'media'"  # Have to update these manually as bash does not have nested mounts
    exit 2;;
esac

# Proper command found, time to execute it
echo "I am going to: "$1 ${mountInfo[name]}

if [ $1 == "mount" ]; then
  if ! mountpoint -q ${mountInfo[mountDir]} ; then
      ${mountInfo[mountCommand]}
      if [[ $? -ne 0 ]]; then
        echo "Something went wrong with mounting. See errors above."
      else
        echo "Mounted successfully."
      fi
  else
    echo ${mountInfo[name]} "is already mounted. Exiting."
  fi
elif  [ $1 == "unmount" ]; then
    if mountpoint -q ${mountInfo[mountDir]} ; then
      ${mountInfo[unmountCommand]}
      if [[ $? -ne 0 ]]; then
        echo "Something went wrong with unmounting. See errors above."
      else
        echo "Unmounted successfully."
      fi
    else
      echo ${mountInfo[name]} "is not mounted. Exiting."
    fi
fi
